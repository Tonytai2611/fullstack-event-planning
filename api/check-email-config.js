import dotenv from 'dotenv';
import nodemailer from 'nodemailer';
import readline from 'readline';

// Load environment variables
dotenv.config();

// Create readline interface for user input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Function to check email configuration
async function checkEmailConfig() {
  console.log('===== KI·ªÇM TRA C·∫§U H√åNH EMAIL =====');
  
  // Check if email settings are configured
  const emailUsername = process.env.EMAIL_USERNAME;
  const emailPassword = process.env.EMAIL_PASSWORD;
  
  if (!emailUsername) {
    console.error('‚ùå EMAIL_USERNAME ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env');
    process.exit(1);
  }
  
  if (!emailPassword) {
    console.error('‚ùå EMAIL_PASSWORD ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env');
    process.exit(1);
  }
  
  console.log('‚úÖ T√¨m th·∫•y c·∫•u h√¨nh email trong file .env');
  console.log(`üìß Email g·ª≠i: ${emailUsername}`);
  
  // Test connection to Gmail
  console.log('\nƒêang k·∫øt n·ªëi ƒë·∫øn Gmail SMTP...');
  
  try {
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: emailUsername,
        pass: emailPassword
      }
    });
    
    // Verify connection
    await transporter.verify();
    console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn Gmail SMTP!');
    
    // Ask if user wants to send a test email
    rl.question('\nB·∫°n c√≥ mu·ªën g·ª≠i email test kh√¥ng? (y/n): ', async (answer) => {
      if (answer.toLowerCase() === 'y') {
        rl.question('Nh·∫≠p ƒë·ªãa ch·ªâ email nh·∫≠n test: ', async (testEmail) => {
          console.log(`\nƒêang g·ª≠i email test ƒë·∫øn ${testEmail}...`);
          
          try {
            const info = await transporter.sendMail({
              from: `"Event Planning App" <${emailUsername}>`,
              to: testEmail,
              subject: 'Test Email t·ª´ Event Planning App',
              text: 'ƒê√¢y l√† email test ƒë·ªÉ ki·ªÉm tra c·∫•u h√¨nh nodemailer.',
              html: `
                <div style="font-family: Arial, sans-serif; padding: 20px; border: 1px solid #e0e0e0; border-radius: 8px;">
                  <h2 style="color: #4f46e5;">Test Email Th√†nh C√¥ng!</h2>
                  <p>N·∫øu b·∫°n nh·∫≠n ƒë∆∞·ª£c email n√†y, c·∫•u h√¨nh email c·ªßa ·ª©ng d·ª•ng ƒë√£ ho·∫°t ƒë·ªông ƒë√∫ng.</p>
                  <p>Th·ªùi gian g·ª≠i: ${new Date().toLocaleString()}</p>
                </div>
              `
            });
            
            console.log('‚úÖ Email test ƒë√£ g·ª≠i th√†nh c√¥ng!');
            console.log(`üìã MessageId: ${info.messageId}`);
            console.log('\n‚ö†Ô∏è L∆ØU √ù: N·∫øu b·∫°n kh√¥ng th·∫•y email trong Inbox, h√£y ki·ªÉm tra th∆∞ m·ª•c Spam.');
          } catch (error) {
            console.error('‚ùå L·ªói khi g·ª≠i email test:', error);
          }
          
          rl.close();
        });
      } else {
        console.log('K·∫øt th√∫c ki·ªÉm tra c·∫•u h√¨nh email.');
        rl.close();
      }
    });
  } catch (error) {
    console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Gmail SMTP!');
    console.error('Chi ti·∫øt l·ªói:', error.message);
    console.log('\nNguy√™n nh√¢n c√≥ th·ªÉ:');
    console.log('1. M·∫≠t kh·∫©u ·ª©ng d·ª•ng kh√¥ng ƒë√∫ng');
    console.log('2. Ch∆∞a b·∫≠t "Less secure app access" ho·∫∑c ch∆∞a t·∫°o App password');
    console.log('3. L·ªói m·∫°ng ho·∫∑c Gmail t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng');
    console.log('\nH∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:');
    console.log('1. ƒê·∫£m b·∫£o b·∫°n ƒë√£ b·∫≠t x√°c th·ª±c 2 y·∫øu t·ªë cho t√†i kho·∫£n Gmail');
    console.log('2. T·∫°o "App password" t·∫°i https://myaccount.google.com/apppasswords');
    console.log('3. S·ª≠ d·ª•ng App password v·ª´a t·∫°o thay v√¨ m·∫≠t kh·∫©u Gmail th√¥ng th∆∞·ªùng');
    rl.close();
  }
}

checkEmailConfig();
